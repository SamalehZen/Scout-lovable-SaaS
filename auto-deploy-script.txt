#!/bin/bash

# Script de d√©ploiement complet Adorable vers Vercel
# Usage: chmod +x auto-deploy.sh && ./auto-deploy.sh

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions d'affichage
print_header() { echo -e "${BLUE}üöÄ $1${NC}"; }
print_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
print_error() { echo -e "${RED}‚ùå $1${NC}"; }
print_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }

# Variables
PROJECT_NAME="adorable-production"
DOMAIN="samaleh-arka.com"
GITHUB_REPO=""

print_header "D√©ploiement Automatis√© Adorable vers Vercel"
echo "=============================================="
echo ""

# V√©rifications pr√©liminaires
print_info "V√©rification de l'environnement..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©"
    exit 1
fi

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©"
    exit 1
fi

# V√©rifier git
if ! command -v git &> /dev/null; then
    print_error "git n'est pas install√©"
    exit 1
fi

print_success "Environnement valid√©"

# V√©rifier le fichier .env
if [ ! -f ".env" ]; then
    print_error "Fichier .env manquant"
    print_info "Assurez-vous d'√™tre dans le bon r√©pertoire"
    exit 1
fi

print_success "Configuration .env trouv√©e"

# Demander l'URL du repository GitHub
echo ""
print_info "Configuration GitHub"
read -p "URL de votre repository GitHub (ex: https://github.com/username/adorable-production.git): " GITHUB_REPO

if [ -z "$GITHUB_REPO" ]; then
    print_error "URL GitHub requise"
    exit 1
fi

# Cr√©er les fichiers de configuration de production
print_info "Cr√©ation des fichiers de production..."

# Cr√©er vercel.json si pas existant
if [ ! -f "vercel.json" ]; then
    cat > vercel.json << 'EOF'
{
  "name": "adorable-production",
  "framework": "nextjs",
  "buildCommand": "npm run build",
  "outputDirectory": ".next",
  "installCommand": "npm install --legacy-peer-deps",
  "functions": {
    "src/app/api/**/*.ts": {
      "maxDuration": 30
    }
  },
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-Content-Type-Options", 
          "value": "nosniff"
        },
        {
          "key": "Referrer-Policy",
          "value": "origin-when-cross-origin"
        }
      ]
    }
  ]
}
EOF
    print_success "vercel.json cr√©√©"
fi

# Build test local
print_info "Test du build local..."
if npm run build; then
    print_success "Build local r√©ussi"
else
    print_error "Erreur de build local"
    print_info "Corrigez les erreurs avant de continuer"
    exit 1
fi

# Configuration Git
print_info "Configuration Git..."

# Initialiser git si n√©cessaire
if [ ! -d ".git" ]; then
    git init
    print_success "Repository git initialis√©"
fi

# Ajouter tous les fichiers
git add .

# Commit
if git diff --staged --quiet; then
    print_warning "Aucun changement √† commiter"
else
    git commit -m "Production deployment setup - $(date)"
    print_success "Changements commit√©es"
fi

# Ajouter remote si pas existant
if ! git remote get-url origin &> /dev/null; then
    git remote add origin "$GITHUB_REPO"
    print_success "Remote GitHub ajout√©"
fi

# Push vers GitHub
print_info "Push vers GitHub..."
git branch -M main
if git push -u origin main; then
    print_success "Code push√© vers GitHub"
else
    print_error "Erreur lors du push"
    print_info "V√©rifiez vos droits d'acc√®s au repository"
    exit 1
fi

# Instructions pour Vercel
echo ""
print_header "Configuration Vercel"
echo "====================="
echo ""
print_info "Maintenant, suivez ces √©tapes sur vercel.com :"
echo ""
echo "1. üåê Allez sur https://vercel.com"
echo "2. üîê Connectez-vous avec GitHub"
echo "3. ‚ûï New Project > Import $PROJECT_NAME"
echo "4. ‚öôÔ∏è  Avant de d√©ployer, ajoutez ces variables d'environnement :"
echo ""

# Lire les variables du .env et les afficher (masqu√©es)
print_info "Variables d'environnement √† configurer :"
echo ""
while IFS= read -r line; do
    if [[ $line == *"="* ]] && [[ $line != "#"* ]]; then
        key=$(echo "$line" | cut -d'=' -f1)
        value=$(echo "$line" | cut -d'=' -f2-)
        # Masquer la valeur mais montrer le format
        masked_value=$(echo "$value" | sed 's/./*/g' | head -c 20)
        echo "   $key = $masked_value..."
    fi
done < .env

echo ""
echo "5. üöÄ Cliquez sur Deploy"
echo "6. üåê Une fois d√©ploy√©, ajoutez le domaine : $DOMAIN"
echo ""

# Instructions DNS
print_header "Configuration DNS"
echo "=================="
echo ""
print_info "Configurez ces enregistrements DNS pour $DOMAIN :"
echo ""
echo "Type: A"
echo "Name: @"
echo "Value: 76.76.19.61"
echo ""
echo "Type: CNAME"
echo "Name: www"
echo "Value: cname.vercel-dns.com"
echo ""

# Instructions Stack Auth
print_header "Configuration Stack Auth"
echo "========================="
echo ""
print_info "Mettez √† jour Stack Auth sur https://app.stack-auth.com :"
echo ""
echo "Authorized domains:"
echo "- https://$DOMAIN"
echo "- https://www.$DOMAIN"
echo ""
echo "Authorized redirect URIs:"
echo "- https://$DOMAIN/api/auth/callback"
echo "- https://www.$DOMAIN/api/auth/callback"
echo ""

# R√©sum√© final
print_header "R√©sum√©"
echo "======"
echo ""
print_success "‚úÖ Code push√© vers GitHub"
print_success "‚úÖ Configuration de production pr√™te"
print_success "‚úÖ Build local valid√©"
echo ""
print_info "üìã Prochaines √©tapes :"
echo "1. Configurer Vercel (voir instructions ci-dessus)"
echo "2. Ajouter les variables d'environnement"
echo "3. D√©ployer"
echo "4. Configurer DNS"
echo "5. Mettre √† jour Stack Auth"
echo ""
print_info "üéØ Votre app sera disponible sur : https://$DOMAIN"
print_info "üí∞ Co√ªt total : 0‚Ç¨ (100% gratuit !)"
echo ""
print_header "üéâ Pr√©paration termin√©e avec succ√®s !"